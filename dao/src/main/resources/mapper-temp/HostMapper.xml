<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.hyperledger.justitia.dao.mapper.HostMapper" >
  <resultMap id="BaseResultMap" type="org.hyperledger.justitia.dao.bean.Host" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="protocol" property="protocol" jdbcType="VARCHAR" />
    <result column="ip" property="ip" jdbcType="VARCHAR" />
    <result column="port" property="port" jdbcType="INTEGER" />
    <result column="tls_enable" property="tlsEnable" jdbcType="BIT" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="org.hyperledger.justitia.dao.bean.Host" extends="BaseResultMap" >
    <result column="cert_path" property="certPath" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, protocol, ip, port, tls_enable
  </sql>
  <sql id="Blob_Column_List" >
    cert_path
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from host
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from host
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="org.hyperledger.justitia.dao.bean.Host" >
    insert into host (id, protocol, ip, 
      port, tls_enable, cert_path
      )
    values (#{id,jdbcType=VARCHAR}, #{protocol,jdbcType=VARCHAR}, #{ip,jdbcType=VARCHAR}, 
      #{port,jdbcType=INTEGER}, #{tlsEnable,jdbcType=BIT}, #{certPath,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="org.hyperledger.justitia.dao.bean.Host" >
    insert into host
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="protocol != null" >
        protocol,
      </if>
      <if test="ip != null" >
        ip,
      </if>
      <if test="port != null" >
        port,
      </if>
      <if test="tlsEnable != null" >
        tls_enable,
      </if>
      <if test="certPath != null" >
        cert_path,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="protocol != null" >
        #{protocol,jdbcType=VARCHAR},
      </if>
      <if test="ip != null" >
        #{ip,jdbcType=VARCHAR},
      </if>
      <if test="port != null" >
        #{port,jdbcType=INTEGER},
      </if>
      <if test="tlsEnable != null" >
        #{tlsEnable,jdbcType=BIT},
      </if>
      <if test="certPath != null" >
        #{certPath,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.hyperledger.justitia.dao.bean.Host" >
    update host
    <set >
      <if test="protocol != null" >
        protocol = #{protocol,jdbcType=VARCHAR},
      </if>
      <if test="ip != null" >
        ip = #{ip,jdbcType=VARCHAR},
      </if>
      <if test="port != null" >
        port = #{port,jdbcType=INTEGER},
      </if>
      <if test="tlsEnable != null" >
        tls_enable = #{tlsEnable,jdbcType=BIT},
      </if>
      <if test="certPath != null" >
        cert_path = #{certPath,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="org.hyperledger.justitia.dao.bean.Host" >
    update host
    set protocol = #{protocol,jdbcType=VARCHAR},
      ip = #{ip,jdbcType=VARCHAR},
      port = #{port,jdbcType=INTEGER},
      tls_enable = #{tlsEnable,jdbcType=BIT},
      cert_path = #{certPath,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.hyperledger.justitia.dao.bean.Host" >
    update host
    set protocol = #{protocol,jdbcType=VARCHAR},
      ip = #{ip,jdbcType=VARCHAR},
      port = #{port,jdbcType=INTEGER},
      tls_enable = #{tlsEnable,jdbcType=BIT}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>